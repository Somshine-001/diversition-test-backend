// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  title String

  // Relations
  users User[]

  @@map("roles")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  username   String   @unique
  password   String
  createDate DateTime @default(now()) @map("create_date")

  // Relations
  role     Role      @relation(fields: [roleId], references: [id])
  roleId   Int       @map("role_id")
  products Product[]
  opinions Opinion[]

  @@map("users")
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  title      String?
  price      Int      
  amount     Int      
  image      String?
  createDate DateTime @default(now()) @map("create_date")
  updateDate DateTime @updatedAt @map("update_date")

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @map("user_id")
  opinions Opinion[]

  @@map("products")
}

model Opinion {
  id         Int      @id @default(autoincrement())
  title      String
  createDate DateTime @default(now()) @map("create_date")
  updateDate DateTime @updatedAt @map("update_date")

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("opinions")
}
